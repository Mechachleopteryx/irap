#!/usr/bin/env Rscript
#; -*- mode: R;-*-
# =========================================================
# Copyright 2012-2018,  Nuno A. Fonseca (nuno dot fonseca at gmail dot com)
#
# This file is part of iRAP.
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with iRAP.  If not, see <http://www.gnu.org/licenses/>.
#
#
# =========================================================
suppressPackageStartupMessages(library("optparse"))

IRAP.DIR <- Sys.getenv(c("IRAP_DIR"))
if ( IRAP.DIR == "" ) {
  cat("ERROR: environment variable IRAP_DIR is not set\n")
  q(status=1)
}
# specify our desired options in a list
#
source(paste(IRAP.DIR,"aux/R","irap_utils.R",sep="/"))
pdebug.enabled <- FALSE

#######################
usage <- "irap_merge_mtx --out mtx_filename_prefix [options]"
option_list <- list(
    make_option(c("-o","--out"),type="character",default=NULL,help="Output mtx file"),
    make_option(c("--in"),type="character",dest="mtx_files",default=NULL,help="mtx files (file names should be separated by comma)"),
    make_option(c("-l", "--all_feat"), type="character", dest="all_feat_file", default=NULL, help="filename of a TSV file containing all features names (in the first column)."),
    make_option(c("-n", "--all_feat_col"), type="numeric", dest="all_feat_col", default=1, help="column in the file passed in --all_feat with the feature names."),
    make_option(c("--basename_header"),action="store_true",dest="basename_header",default=FALSE,help="keep only the basename in the column name."),
    make_option(c("--exclude_irap_suffix"),action="store_true",dest="exclude_irap_suffix",default=FALSE,help="Exclude irap suffix from the name."),
    make_option(c("--add_header"),action="store_true",dest="add_header",default=FALSE,help=""),
    make_option(c("--dirname_header"),action="store_true",dest="dirname_header",default=FALSE,help="keep only the dirname in the column name."),
    make_option(c("--is_tsv"),action="store_true",dest="is.tsv",default=FALSE,help="Input matrices are in tsv format (instead of MTX)."),
    make_option(c("--debug"),action="store_true",dest="debug",default=FALSE,help="Debug mode")
)


# 
mandatory <- c("out","mtx_files")
filenames <- c("all_feat_file")

#
args <- importArgsfromStdin()
opt <- myParseArgs(usage = usage,option_list=option_list,filenames.exist=filenames,
                   mandatory=mandatory,args=args)

pdebug.enabled <- opt$debug
pdebug.save.state("irap_merge_mtx","p0")

add.Sparse.Matrices <- function(M1,M2) {
    ##  M2 dest
    shared.cols <- intersect(colnames(M2),colnames(M1))
    ## do not consider empty columns
    cs <- colSums(M1[,shared.cols,drop=FALSE])
    ## remove the shared cols with no values
    tmp.M1 <- M1[,!colnames(M1)%in%names(cs[cs==0]),drop=FALSE]   
    ## update shared cols
    shared.cols <- intersect(colnames(M2),colnames(tmp.M1))

    if ( length(shared.cols) >0 ) {
        ## non-zero rows
        nzr1 <- rowSums(M1[,shared.cols,drop=FALSE])>0
        nzr2 <- rowSums(M2[,shared.cols,drop=FALSE])>0
        nzr2e <- nzr1 & nzr2
        pwarning("columns shared (" ,length(shared.cols),")" )
        pwarning("non zero rows(" ,sum(nzr2e),")" )
        ## assuming that these are replicates
        pinfo("aggregating columns common between files")
        M2[nzr2e,shared.cols] <- M2[nzr2e,shared.cols,drop=FALSE]+tmp.M1[rownames(M2)[nzr2e],shared.cols,drop=FALSE]
        pinfo("aggregating columns common between files...done")
        ## cols unique to x (2nd file)
        M1 <- M1[,!colnames(M1)%in%shared.cols,drop=FALSE]
        M1 <- M1[,colSums(M1)>0,drop=FALSE]
    } 
    return(cbind(M2,M1))
}

library(Matrix)
##
generateTestMatrix <- function(N=50000, n.row=100, n.col=20) {

    s1 <- sample(N, n.row)
    c1 <- sample(N, n.col)
    M1 <- array(0, dim=c(n.row,n.col), dimnames=list(s1, c1))
    r1 <- sample(n.row*n.col,n.row, replace=TRUE)
    M1[r1] <- sample(N,n.row)
    Matrix(M1)
}
## set.seed(50)
## M1 <- generateTestMatrix(100, 50, 20)
## M2 <- generateTestMatrix(100, 50, 30)
## microbenchmark(add.Sparse.Matrices(M1, M2))
pinfo("Parameters parsed.")

all.feat <- NULL
if ( !is.null(opt$all_feat_file) ) {
    pinfo("Reading ",opt$all_feat_file," ...")
    all.feat <- as.character(unique(read.table(opt$all_feat_file,header=T,sep="\t")[,opt$all_feat_col]))
    pinfo("Reading ",opt$all_feat_file," ...done.")
    pinfo("Expected ",length(all.feat)," unique genes/transcripts")
}

out.table <- NULL

files <- unique(unlist(strsplit(opt$mtx_files,"[ \t\n,;]+")))
nfiles <- length(files)
pinfo("Merging ",nfiles," files")
ctr <- 0
##
for ( f in files ) {
    ctr <- ctr+1
    done <- round(ctr/nfiles*100,2)
    pinfo("Processing ",ctr," ",done,"%:",f,".")
    if ( ! file.exists(f) ) {
        perror("File not found ",f)
        q(status=1)
    }
    if (opt$is.tsv ) 
        x <- quant.load(f)
    else
        x <- mtx.load(f)
    #dim(x)
    if ( is.null(x) ) {
        perror("Error loading ",f)
        q(status=1)
    }
    if ( opt$add_header ) {
        if ( ncol(x)!=1 ) {
            perror("Error: expected 1 column (got ",ncol(f),") in file ",f)
            q(status=1)
        }
        label <- f
        if ( opt$basename_header) {
            label <- basename(label)
        } else {
            if ( opt$dirname_header) {
                label <- dirname(label)
            }
        }
        if ( opt$exclude_irap_suffix ) {
            label <- gsub(".(se|pe).(gene|exon|transcrip).*.(tsv|mtx).*","",label)
        }
        colnames(x)[1] <- label
    }

    if ( !is.null(all.feat) ) {
        ##
        miss.rows<-all.feat[!all.feat %in% rownames(x)]
        if (length(miss.rows)>0) {
            new.dim<-c(length(miss.rows),ncol(x))
            xx<-Matrix(0,nrow=new.dim[1],ncol=new.dim[2])
            rownames(xx)<-miss.rows
            colnames(xx)<-colnames(x)
            x<-rbind(x,xx)
            xx <- NULL
        }
    }
    ## 
    ## 
    if ( is.null(out.table) ) {
        x <- x[sort(rownames(x)),,drop=FALSE]
        out.table <- x
    } else {
        ## merge
        #if (nrow(out.table)!=nrow(x) && ncol(x)>1 ) {
        #    pwarning("Matrices should have the same number of rows" )
        #q(status=1)
        #}
        if ( is.null(all.feat) ) {
            if (nrow(out.table)!=nrow(x) && ncol(x)==1 ) {
                pwarning("Ideally matrices should have the same number of rows" )
                pinfo("dim 1:",dim(out.table))
                pinfo("dim 2:",dim(x))                
                all.rows <- unique(c(rownames(out.table),rownames(x)))
                ## add the missing rows to x
                new.x.rows <- all.rows[!all.rows%in%rownames(x)]
                new.x <- Matrix(0,nrow=length(new.x.rows),ncol=1)
                rownames(new.x) <- new.x.rows
                colnames(new.x) <- colnames(x)
                if (opt$is.tsv) new.x <- as.matrix(new.x)
                new.x <- rbind(x,new.x)
                ## out.table
                new.out.rows <- all.rows[!all.rows%in%rownames(out.table)]
                new.out <- Matrix(0,ncol=ncol(out.table),nrow=length(new.out.rows))
                rownames(new.out) <- new.out.rows
                colnames(new.out) <- colnames(out.table)
                if (opt$is.tsv) new.out <- as.matrix(new.out)
                new.out <- rbind(out.table,new.out)
                out.table <- new.out
                x <- new.x
                new.x <- NULL
                new.out <- NULL
                pinfo("number of rows fixed...")
            }
        }
        x <- x[rownames(out.table),,drop=FALSE]        
        out.table <- add.Sparse.Matrices(out.table,x)
    }
}

if (opt$is.tsv ) {
    write.tsv(out.table,file=opt$out,rownames.label="Feature")
} else {
    write.mtx(out.table,filename=opt$out,gzip=TRUE)
}
pinfo("all done.")
q(status=0)

IRAP.DIR <- Sys.getenv(c("IRAP_DIR"))
if ( IRAP.DIR == "" ) {
  IRAP.DIR="/home/nf/Research/Projects/WIP/EREAP/irap/"
  Sys.setenv(IRAP_DIR=IRAP.DIR)
}
setwd("/home/nf/Research/Projects/WIP/EREAP/irap_tests")
